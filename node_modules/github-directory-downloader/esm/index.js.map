{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["import fs from 'fs-extra';\r\nimport fetch from 'node-fetch';\r\nimport { dirname, isAbsolute, resolve } from 'path';\r\nimport { promisify } from 'util';\r\n\r\nimport { Config, Stats, TreeItem } from './types';\r\n\r\nconst streamPipeline = promisify(require('stream').pipeline);\r\n\r\n// Matches '/<re/po>/tree/<ref>/<dir>'\r\nconst urlParserRegex = /^[/]([^/]+)[/]([^/]+)[/]tree[/]([^/]+)[/](.*)/;\r\n\r\nasync function fetchRepoInfo(repo: string, token?: string, muteLog?: boolean) {\r\n    const response = await fetch(`https://api.github.com/repos/${repo}`,\r\n        token ? {\r\n            headers: {\r\n                Authorization: `Bearer ${token}`\r\n            }\r\n        } : {}\r\n    );\r\n\r\n    switch (response.status) {\r\n        case 401:\r\n            if (!muteLog) console.log('⚠ The token provided is invalid or has been revoked.', { token: token });\r\n            throw new Error('Invalid token');\r\n\r\n        case 403:\r\n            // See https://developer.github.com/v3/#rate-limiting\r\n            if (response.headers.get('X-RateLimit-Remaining') === '0') {\r\n                if (!muteLog) console.log('⚠ Your token rate limit has been exceeded.', { token: token });\r\n                throw new Error('Rate limit exceeded');\r\n            }\r\n\r\n            break;\r\n\r\n        case 404:\r\n            if (!muteLog) console.log('⚠ Repository was not found.', { repo });\r\n            throw new Error('Repository not found');\r\n\r\n        default:\r\n    }\r\n\r\n    if (!response.ok) {\r\n        if (!muteLog) console.log('⚠ Could not obtain repository data from the GitHub API.', { repo, response });\r\n        throw new Error('Fetch error');\r\n    }\r\n\r\n    return response.json();\r\n}\r\n\r\nasync function viaTreesApi({\r\n    user,\r\n    repository,\r\n    ref = 'HEAD',\r\n    directory,\r\n    token,\r\n    muteLog\r\n}: {\r\n    user: string;\r\n    repository: string;\r\n    ref: string;\r\n    directory: string;\r\n    token?: string;\r\n    muteLog?: boolean;\r\n}) {\r\n    if (!directory.endsWith('/')) {\r\n        directory += '/';\r\n    }\r\n\r\n    const files: TreeItem[] = [];\r\n\r\n    const contents: {\r\n        url: string;\r\n        sha: string;\r\n        tree: TreeItem[];\r\n        message?: string;\r\n        truncated: boolean;\r\n    } = await fetchRepoInfo(`${user}/${repository}/git/trees/${ref}?recursive=1`, token, muteLog);\r\n\r\n    if (contents.message) {\r\n        throw new Error(contents.message);\r\n    }\r\n\r\n    for (const item of contents.tree) {\r\n        if (item.type === 'blob' && item.path.startsWith(directory)) {\r\n            files.push(item);\r\n        }\r\n    }\r\n\r\n    return files;\r\n}\r\n\r\nasync function getRepoMeta(user: string, repository: string, ref: string, dir: string, config?: Config) {\r\n\r\n    const repoIsPrivate: boolean = (await fetchRepoInfo(`${user}/${repository}`, config?.token, config?.muteLog)).private;\r\n\r\n    const files: TreeItem[] = await viaTreesApi({\r\n        user,\r\n        repository,\r\n        ref,\r\n        directory: decodeURIComponent(dir),\r\n        token: config?.token,\r\n        muteLog: config?.muteLog,\r\n    });\r\n\r\n    return {\r\n        files,\r\n        repoIsPrivate\r\n    }\r\n}\r\n\r\nconst parseUrl = (source: string, muteLog?: boolean) => {\r\n    try {\r\n        const [, user, repository, ref, dir] = urlParserRegex.exec(new URL(source).pathname) ?? [];\r\n\r\n        return [user, repository, ref, dir];\r\n\r\n    } catch (e) { }\r\n    return [];\r\n}\r\n\r\n\r\nexport default async function download(source: string, saveTo: string, config?: Config): Promise<Stats> {\r\n\r\n    const stats: Stats = { files: {}, downloaded: 0, success: false };\r\n\r\n    const [user, repository, ref, dir] = parseUrl(source);\r\n\r\n    if (!user || !repository) {\r\n        if (!config?.muteLog) console.error('Invalid url. It must match: ', urlParserRegex);\r\n        stats.error = 'Invalid url';\r\n        return stats;\r\n    }\r\n\r\n    if (!saveTo) {\r\n        saveTo = resolve(process.cwd(), dir);\r\n    }\r\n    if (!isAbsolute(saveTo)) saveTo = resolve(process.cwd(), saveTo);\r\n\r\n\r\n    let meta;\r\n    try {\r\n        meta = await getRepoMeta(user, repository, ref, dir, config)\r\n    } catch (e) {\r\n        if (!config?.muteLog) console.error('Failed to fetch repo meta info: ', e);\r\n\r\n        await new Promise(resolve => setTimeout(resolve, 3000));\r\n\r\n        try {\r\n            meta = await getRepoMeta(user, repository, ref, dir, config)\r\n        } catch (e) {\r\n            if (!config?.muteLog) console.error('Failed to fetch repo meta info after second attempt: ', e);\r\n\r\n            stats.error = e;\r\n            return stats;\r\n        }\r\n    }\r\n\r\n    const { files, repoIsPrivate } = meta;\r\n\r\n    if (files.length === 0) {\r\n        if (!config?.muteLog) console.log('No files to download');\r\n        stats.success = true;\r\n        return stats;\r\n    }\r\n\r\n    if (!config?.muteLog) console.log(`Downloading ${files.length} files…`);\r\n\r\n\r\n    const fetchFile = async (file: TreeItem) => {\r\n        const response = await fetch(\r\n            `https://raw.githubusercontent.com/${user}/${repository}/${ref}/${file.path}`,\r\n            config?.token ? {\r\n                headers: {\r\n                    Authorization: `Bearer ${config?.token}`\r\n                },\r\n            } : undefined\r\n        );\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP ${response.statusText} for ${file.path}`);\r\n        }\r\n\r\n        return response;\r\n    };\r\n\r\n    let downloaded = 0;\r\n\r\n    const download = async (file: TreeItem) => {\r\n        let response;\r\n        try {\r\n            response = await fetchFile(file);\r\n        } catch (e) {\r\n            if (!config?.muteLog) console.log('⚠ Failed to download file: ' + file.path, e);\r\n\r\n            await new Promise(resolve => setTimeout(resolve, 2000));\r\n\r\n            try {\r\n                response = await fetchFile(file);\r\n            } catch (e) {\r\n                if (!config?.muteLog) console.log('⚠ Failed to download file after second attempt: ' + file.path, e);\r\n                return;\r\n            }\r\n        }\r\n\r\n        try {\r\n            downloaded++;\r\n\r\n            const fileName = resolve(saveTo, file.path.replace(dir + '/', ''));\r\n\r\n            await fs.ensureDir(dirname(fileName));\r\n            await streamPipeline(response.body, fs.createWriteStream(fileName));\r\n\r\n            stats.files[file.path] = fileName;\r\n\r\n        } catch (e) {\r\n            if (!config?.muteLog) console.error('Failed to write file: ' + file.path, e);\r\n        }\r\n    };\r\n\r\n    const requests = config?.requests ?? 10;\r\n    const statuses: Promise<void>[] = [];\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n        const num = i % requests;\r\n        if (statuses[num]) {\r\n            await statuses[num];\r\n        }\r\n        statuses[num] = download(files[i]);\r\n    }\r\n\r\n    await Promise.all(statuses);\r\n\r\n\r\n    if (!config?.muteLog) console.log(`Downloaded ${downloaded}/${files.length} files`);\r\n\r\n    stats.downloaded = downloaded;\r\n\r\n    if (files.length === downloaded) stats.success = true;\r\n\r\n    return stats;\r\n}"],"names":[],"mappings":"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"}